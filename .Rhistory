writeOGR(snap_pts_SP, getwd(), "Centroids_Fraser_RD", driver = "ESRI Shapefile") # Version for RiverDist (sp format)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD.shp", rivers=HR)
View(snap_pts_ID)
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD.shp", rivers=HR)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RDQ.shp", rivers=HR)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR)
hist(segvert_Pop$snapdist, main = "snapping distance (m)")
View(segvert_Pop)
View(segvert_Pop)
View(segvert_Pop)
View(pointshp2segvert())
view(pointshp2segvert())
View(pointshp2segvert
)
View(xy2segvert)
View(segvert_Pop)
View(segvert_Pop)
segvert_Pop %>%
select(snapdist >= 1000)
cnt_seg <- segvert_Pop$snapdist >= 1000
as_tibble(segvert_Pop) %>%
select(snapdist >= 1000)
segvert_Pop_tib <- tibble(segvert_Pop)
segvert_Pop_tib_sub <- filter(snapdist >= 1000)
segvert_Pop_tib_sub <- select(snapdist >= 1000)
library(dplyr, warn.conflicts = F)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%select(snapdist >= 1000)
segvert_Pop_tib_sub <- segvert_Pop_tib %>% select(snapdist >= 1000)
View(segvert_Pop_tib)
View(segvert_Pop)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%
filter(snapdist >= 1000
)
segvert_Pop_tib_sub <- segvert_Pop_tib %>%
filter(snapdist >= 500)
# Densify the river network to avoid long snaps in lake segments
HR_dense <- addverts(HR, mindist = 500)
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR_dense)
hist(segvert_Pop$snapdist, main = "snapping distance (m)")
zoomtoseg(seg=c(1,15), rivers=HR_dense)
zoomtoseg(seg=c(1), rivers=HR_dense)
zoomtoseg(seg=c(1,4), rivers=HR_dense)
# Distance computation
# First, let's find the end segment (i.e., furthest downstream)
# At the moment, that's manually iterative (i.e., change seg values with in functions below)
# Segment 1 will not necessarily always be the outlet segment
showends(seg=1, rivers =HR_dense) # Here, segment 1 is the end one
zoomtoseg(seg=c(1,4), rivers=HR_dense)
# Second, set mouth of the network
HR1 <- setmouth(seg=1, vert=1, rivers = HR_dense)
HR1 <- buildsegroutes(HR1)
install.packages("coinr")
install.packages("COINr")
install.packages("exactextractR")
install.packages("exactextractr")
HUC12 <- st_read()
library(tidyverse)
library(sf)
library(terra)
library(exactextractr)
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp")
Intakes <- st_read("Canada_Municipal_Surface_Intake_V4_28102021.gpkg")
View(HUC12)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/01_RAW_DATA")
CanTreeCover <- rast("NRCAN/NFI_MODIS250m_kNN_LandCover_VegTreed_v0.tif")
plot(CanTreeCover)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/NRCAN/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Update as needed
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/NRCAN/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
# Beware of CRS => make sure it is the same for all data
HUC12 <- st_read("02_PROCESSED_DATA/HydroBasin_HUC12_Fraser_Fixed.shp") %>%
st_transform(crs = 3979)
Intakes <- st_read("02_PROCESSED_DATA/Canada_Municipal_Surface_Intake_V4_28102021.gpkg")
crs(HUC12)
CanTreeCover <- rast("01_RAW_DATA/NRCAN/NFI_MODIS250m_kNN_LandCover_VegTreed_v0.tif")
crs(CanTreeCover)
CanTreeCoverEPSG3979 <- warp(CanTreeCover, crs = 3979)
CanTreeCoverEPSG3979 <- project(CanTreeCover, crs = 3979)
CanTreeCoverEPSG3979 <- project(x = CanTreeCover, y = "epsg:3979")
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCover, HUC12, 'sum', progress = F)
View(HUC12)
HUC12_ForCov
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F)
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_col = 'HYBAS_ID')
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = 'HYBAS_ID')
View(HUC12_ForCov)
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = [1:10])
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = c('HYBAS_ID', 'NEXT_DOWN'))
View(HUC12)
View(HUC12)
plot(st_geometry(HUC12))
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum', progress = F, append_cols = c('HYBAS_ID', 'geometry'))
View(HUC12_ForCov)
plot(st_geometry(HUC12_ForCov))
plot(st_geometry(as_sf(HUC12_ForCov)))
plot(st_geometry(st_as_sf(HUC12_ForCov)))
# Raster data extraction/summary per HUC12
HUC12_ForCov <- exact_extract(CanTreeCoverEPSG3979, HUC12, 'sum',
progress = F, append_cols = c('HYBAS_ID')) %>%
rename(forcov = sum)
HUC12 <- HUC12 %>%
right_join(HUC12_ForCov)
View(HUC12)
plot(st_geometry(HUC12_ForCov))
plot(st_geometry(HUC12$forcov))
ggplot() +
ggplot(HUC12) +
geom_sf(forcov, color = 'green')
ggplot(HUC12) +
geom_sf(data=forcov, colour = 'green')
ggplot() +
geom_sf(data=HUC$forcov, colour = 'green')
ggplot() +
geom_sf(data=HUC12$forcov, colour = 'green')
ggplot(HUC12) +
geom_sf(aes(fill = forcov))
View(HUC12)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
setwd("D:/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE/02_PROCESSED_DATA")
## general options ---------------------------
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
memory.limit(30000000)     # this is needed on some PCs to increase memory allowance
## load libraries ---------------------------
library(riverdist)
library(sf)
library(dplyr, warn.conflicts = F)
library(ggplot2)
# Riverdist sandbox
# Import river network
HR <- line2network(path=".", layer = "HydroRiver_Fraser_RD")
# Import
segvert_Pop <- pointshp2segvert(path=".",layer="Centroids_Fraser_RD", rivers=HR_dense)
# Second, set mouth of the network
HR1 <- setmouth(seg=1, vert=1, rivers = HR)
HR1 <- buildsegroutes(HR1)
View(HR)
## ---------------------------
## Script name: 01_UpdateHydroATLAS.R
##
## Purpose of script: Select from and add new variables to HydroATLAS for F2F-C
##                    analysis.
##
## Author: Dr. François-Nicolas Robinne
##
## Date Created: 2022-01-21
##
## Version: 1.0
##
## Project: Forest to Faucets Canada
##
## Copyright (c) François-Nicolas Robinne, 2022
## Email: robinne@ualberta.ca
##
##
## Notes: This should better be ran first so all variables are set
##        It is necessary to have these variables ready to create the composite indicator
##        They will be attached to the catchment outlets as well
##        Make sure to keep the field HYBAS_ID => it's the primary key for future spatial and tabular joins
##
## set working directory -------------------------------------------------------
# Update as needed
setwd("C:/Users/frobinne/Documents/Professional/PROJECTS/39_2021_CANADA_F2F_SOURCE2TAP_ACTIVE")
## general options -------------------------------------------------------------
options(scipen = 12, digits = 4) # I prefer to view outputs in non-scientific notation
## load libraries --------------------------------------------------------------
library(tidyverse)
library(sf)
library(terra)
library(exactextractr)
library(RColorBrewer)
library(imputeTS)
library(lubridate)
library(xts)
## load data -------------------------------------------------------------------
# 1) load data from HydroATLAS that I need for the analysis
hybas_can <- st_read("02_PROCESSED_DATA/HYDROLAB_MCGILL/HydroBasins_HUC3_WaterSupply_HUC12_RepairedGeometry_EPSG3979.gpkg") %>%
select(HYBAS_ID, NEXT_DOWN, MAIN_BAS, ENDO, SUB_AREA, COAST,
run_mm_syr, lka_pc_sse, dis_m3_pyr, slp_dg_sav,
sgr_dk_sav, snw_pc_syr, wet_pc_sg2,
for_pc_sse, soc_th_sav, snd_pc_sav, slt_pc_sav)
# 2) Load datasets to update HydroATLAS
wat_demand <- st_read("02_PROCESSED_DATA/NRCAN/Canada_Municipal_Surface_Intake_V5_20230221_NonSnap.gpkg") %>%
select(YR_VOL_M3) # last version of water licence layer
hist_wat_use <- read_csv("02_PROCESSED_DATA/STATCAN/residentialwateruse_en_1991-2019.csv") # Historical domestic water use
pop_proj_can_2060 <- read_csv("01_RAW_DATA/STATCAN/POPULATION_PROJECTIONS/1710005701-Canada.csv") # Projections canada population 2060
burn_pro_can <- rast("02_PROCESSED_DATA/NRCAN/BP3/BP_EPSG3979.tif") # BP3 burn probabilities
burn_pro_us <- rast("01_RAW_DATA/USFS/CONUS_iBP.tif") # FSim burn probabilities for CONUS
burn_pro_al <- rast("01_RAW_DATA/USFS/AK_iBP.tif") # FSim burn probabilities for CONUS
fire_int_can <- rast("02_PROCESSED_DATA/NRCAN/BP3/FI_EPSG3979.tif") # BP3 fire intensities
fire_int_us <- rast(list("01_RAW_DATA/USFS/CONUS_iFLP1.tif", "01_RAW_DATA/USFS/CONUS_iFLP2.tif",
"01_RAW_DATA/USFS/CONUS_iFLP3.tif", "01_RAW_DATA/USFS/CONUS_iFLP4.tif",
"01_RAW_DATA/USFS/CONUS_iFLP5.tif", "01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
rain_ero_na <- rast("02_PROCESSED_DATA/ESDAC/CANADA_RAINFALL_EROSIVITY_EPSG3979.tif") # Rainfall erosivity
rain_ero_na_2050_rcp26 <- rast("02_PROCESSED_DATA/ESDAC/Ero_2050_rcp26_all.tif") # Rainfall erosivity 2050 rcp26
rain_ero_na_2050_rcp45 <- rast("02_PROCESSED_DATA/ESDAC/Ero_2050_rcp45_all.tif") # Rainfall erosivity 2050 rcp45
rain_ero_na_2050_rcp85 <- rast("02_PROCESSED_DATA/ESDAC/Ero_2050_rcp85_all.tif") # Rainfall erosivity 2050 rcp85
fire_int_us <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif", "01_RAW_DATA/USFS/CONUS_iFLP2.tif",
"01_RAW_DATA/USFS/CONUS_iFLP3.tif", "01_RAW_DATA/USFS/CONUS_iFLP4.tif",
"01_RAW_DATA/USFS/CONUS_iFLP5.tif", "01_RAW_DATA/USFS/CONUS_iFLP6.tif") # FSim fire intensity for CONUS
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"))
View(fire_int_us)
fire_int_us
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
fire_int_al <- c(rast("01_RAW_DATA/USFS/AK_iFLP1.tif"), rast("01_RAW_DATA/USFS/AK_iFLP2.tif"),
rast("01_RAW_DATA/USFS/AK_iFLP3.tif"), rast("01_RAW_DATA/USFS/AK_iFLP4.tif"),
rast("01_RAW_DATA/USFS/AK_iFLP5.tif"), rast("01_RAW_DATA/USFS/AK_iFLP6.tif")) # FSim fire intensity for Alaska
# Adds new variables to HydroATLAS at the HUC12 level
# All data must be in NAD83 Canada Atlas Lambert (EPSG:3979) before data extraction
# So, make sure to check and reproject as necessary
#########################################
####### Water demand (licence) ##########
#########################################
# Total water volume extraction per HUC12
HUC12_WatDemand <- hybas_can %>%
st_join(wat_demand) %>%
group_by(HYBAS_ID) %>%
summarise(TotMunWat = sum(YR_VOL_M3))
HUC12_WatDemand_NoNA <- HUC12_WatDemand %>%
mutate(TotMunWat = replace_na(TotMunWat,0)) %>%
st_drop_geometry()
hybas_can_WatDemand <- hybas_can %>%
right_join(HUC12_WatDemand_NoNA) %>%
rename(mwd_m3_syr = TotMunWat) # update name to match HydroATLAS format
# mwd_m3_syr: municipal water demand, in cubic meters per year, within a catchment
# 1) Create a water consumption time series
wat_dates <- hist_wat_use%>%
mutate(Year = ymd(Year, truncated = 2L)) # Convert years to date
wat_dates_xts <- xts(wat_dates$Wat_Use, wat_dates$Year) #Convert dates to TS
ggplot_na_distribution(wat_dates_xts) # Visualize TS with missing values
imp_hist_wat_use <- na_ma(wat_dates_xts) # Imputation using moving average
ggplot_na_imputations(wat_dates_xts, imp_hist_wat_use) # Visualize imputation
imp_hist_wat_use_df <- as.data.frame(imp_hist_wat_use) # convert TS to df
imp_hist_wat_use_df$Year <- rownames(imp_hist_wat_use_df) # Bring back dates as column
imp_hist_wat_use_tib <- as_tibble(imp_hist_wat_use_df) %>%
mutate(Wat_Vol = V1) %>%
select(-V1) # Back to a clean tibble
# 2) Compute growth rates based on water consumption time series
growth_rate <- imp_hist_wat_use_tib %>% # Compute water consumption growth rate
mutate(growth = (Wat_Vol - lag(Wat_Vol))/lag(Wat_Vol))
g <- signif(mean(growth_rate$growth, na.rm = T), digits = 4) # -0.01608
decay_rate <- growth_rate %>% # Compute decay rate of water consumption
mutate(decay = (growth - lag(growth))/lag(growth))
d <- signif(mean(decay_rate$decay, na.rm = T), digits = 4) # -0.5513
# 3) Compute annual population growth rates
# Low growth scenario
pop_2060_low <- pop_proj_can_2060 %>%
select(REF_DATE, VALUE, `Projection scenario`) %>%
filter(grepl('LG',`Projection scenario` )) %>%
filter(REF_DATE == 2021 | REF_DATE == 2060)
# Annual growth => Total growth rate divided by the number of years (39)
pop_growth_2060_low <- signif(((pop_2060_low$VALUE[2] - pop_2060_low$VALUE[1]) /
pop_2060_low$VALUE[1])/39, digits = 4) # ~0.004
# High growth scenario
pop_2060_high <- pop_proj_can_2060 %>%
select(REF_DATE, VALUE, `Projection scenario`) %>%
filter(grepl('HG',`Projection scenario` )) %>%
filter(REF_DATE == 2021 | REF_DATE == 2060)
# Annual growth => Total growth rate divided by the number of years (39)
pop_growth_2060_high <- signif(((pop_2060_high$VALUE[2] - pop_2060_high$VALUE[1]) /
pop_2060_high$VALUE[1])/39, digits = 4) # 0.0186
# 4) Computes 2060 water demand
# Based on population changes and modulation in water demand
Pop_WatDemand_2060 <- hybas_can_WatDemand %>%
select(HYBAS_ID, mwd_m3_syr) %>%
mutate(WatDemand_260_LG = mwd_m3_syr * (1+pop_growth_2060_low*(1+g*(1+d)^1)^39)^39) %>%
mutate(WatDemand_260_HG = mwd_m3_syr * (1+pop_growth_2060_high*(1+g*(1+d)^1)^39)^39) %>%
arrange(desc(WatDemand_260_LG))
# 5) Bring new data to master dataset
hybas_can_WatDemand_2060 <- hybas_can_WatDemand %>%
right_join(st_drop_geometry(Pop_WatDemand_2060)) %>%
rename(mwd_m3_syr_lg60 = WatDemand_260_LG,
mwd_m3_syr_hg60 = WatDemand_260_HG)
0.45*5.67395^0.46
log(0.46)*(1/0.45)
log(1/0.45, base = 0.46)
log(1/0.45)
0.7985/0.46
exp(1.736)
burn_pro_us_EPSG3979 <- terra::project(burn_pro_us,
crs(burn_pro_can),
res = res(burn_pro_can),
filename = "02_PROCESSED_DATA/USFS/CONUS_iBP_250m_EPSG3979_Terra.tif")
# 270m to 250m pixel resolution and EPSG:3979
burn_pro_us_EPSG3979 <- terra::project(burn_pro_us,
crs(burn_pro_can),
res = res(burn_pro_can),
filename = "02_PROCESSED_DATA/USFS/CONUS_iBP_250m_EPSG3979_Terra.tif",
overwrite = T)
burn_pro_al_EPSG3979 <- terra::project(burn_pro_al,
crs(burn_pro_can),
res = res(burn_pro_can),
filename = "02_PROCESSED_DATA/USFS/AL_iBP_250m_EPSG3979_Terra.tif",
overwrite = T)
# 2) Merge burn probability layers
burn_pro_na <- terra::merge(burn_pro_can, burn_pro_us_EPSG3979, burn_pro_al_EPSG3979,
first = T,
filename = "02_PROCESSED_DATA/NRCAN/NA_BP_250m_EPSG3979_Terra.tif",
overwrite = T)
# 3) fill in the holes in Canadian prairies and North (NAs)
burn_pro_na_fill <- terra::focal(burn_pro_na, w = 9, fun = "mean",
na.rm = T, na.policy = "only",
filename = "02_PROCESSED_DATA/NRCAN/NA_BP_250m_EPSG3979_Terra_Filled.tif",
overwrite = T)
plot(burn_pro_na_fill)
# 1) Prepare US intensity layers
fire_int_us_avg <- terra::weighted.mean(fire_int_us, w=c(1,3,5,7,10,14), na.rm = T)
plot(fire_int_us_avg)
fire_int_us_avg_m <- 273*(fire_int_us_avg)^2.17
plot(fire_int_us_avg_m)
fire_int_us_avg_m <- fire_int_us_avg / 0.3048 # Convert feet to meters
fire_int_us_m <- 273*(fire_int_us_avg_m)^2.17
plot(fire_int_us_m)
273*(14)^2.17
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"*1), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"*3),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"*1), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"*3),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
# 1) Prepare US intensity layers
fire_int_us_fl <- lapp(fire_int_us, fun=function(a,b,c,x,y,z){return((a*1), (b*3), (c*5), (x*7), (y*10), (z*14))}
# 1) Prepare US intensity layers
fire_int_us_fl <- lapp(fire_int_us, fun=function(a,b,c,x,y,z){return((a*1), (b*3), (c*5), (x*7), (y*10), (z*14))})
# 1) Prepare US intensity layers
fire_int_us_fl <- lapp(fire_int_us, fun=function(a,b,c,x,y,z){return(a*1, b*3, c*5, x*7, y*10, z*14)})
# 1) Prepare US intensity layers
fire_int_us_fl <- app(fire_int_us, fun=function(a,b,c,x,y,z){return(a*1, b*3, c*5, x*7, y*10, z*14)})
fire_int_us[1]
fire_int_us[[1]
]
# 1) Prepare US intensity layers
fire_int_us_fl <- lapp(fire_int_us[[1]], fun=function(a){return(a*1)})
# 1) Prepare US intensity layers
fire_int_us_fl <- lapp(fire_int_us,fun=function(u,v,w,x,y,z){return(u = u*1, v = v*3)})
# 1) Prepare US intensity layers
fire_int_us_fl[[1]] <- fire_int_us[[1]] * 1
fire_int_us_fl[[2]] <- fire_int_us[[2]] * 3
# 1) Prepare US intensity layers
fire_int_us_fl[1] <- fire_int_us[1] * 1
# 1) Prepare US intensity layers
fire_int_us_fl[1] <- fire_int_us[[1]] * 1
# 1) Prepare US intensity layers
fire_int_us_fl <- (fire_int_us[[1]]*3)
plot(fire_int_us_fl)
# 1) Prepare US intensity layers
fire_int_us_fl <- c(fire_int_us[[1]]*1, fire_int_us[[1]]*3)
# 1) Prepare US intensity layers
fire_int_us_fl <- c(fire_int_us[[1]]*1, fire_int_us[[2]]*3, fire_int_us[[3]]*5,
fire_int_us[[4]]*7, fire_int_us[[5]]*10, fire_int_us[[6]]*14)
plot(fire_int_us_fl[[6]])
# Intensity probabilities times their median flame length
fire_int_us_max <- app(fire_int_fl, fun="max", na.rm = T) # get the max across 6 fire intensity layers
# Intensity probabilities times their median flame length
fire_int_us_max <- app(fire_int_us_fl, fun="max", na.rm = T) # get the max across 6 fire intensity layers
fire_int_us_max_m <- fire_int_us_max / 0.3048 # Convert feet to meters
fire_int_us_kwM <- 273*(fire_int_us_max_m)^2.17
fire_int_us_kWm <- 273*(fire_int_us_max_m)^2.17
plot(fire_int_us_kWm)
plot(fire_int_us_max)
plot(fire_int_us_max_m)
273*(40)^2.17
# Intensity probabilities times their median flame length
fire_int_us_wavg <- terra::weighted.mean(fire_int_us_fl, na.rm = T) # get the max across 6 fire intensity layers
fire_int_us_fl
fire_int_us_1 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 3
fire_int_us_1
fire_int_us <- c(fire_int_us_1, fire_int_us_2, fire_int_us_3, fire_int_us_4, fire_int_us_5, fire_int_us_6)
fire_int_us_2 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 3 # FSim fire intensity for CONUS, LFP 2
fire_int_us_3 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 5 # FSim fire intensity for CONUS, LFP 3
fire_int_us_4 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 7 # FSim fire intensity for CONUS, LFP 4
fire_int_us_5 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 10 # FSim fire intensity for CONUS, LFP 5
fire_int_us_6 <- rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif") * 14 # FSim fire intensity for CONUS, LFP 6
fire_int_us <- c(fire_int_us_1, fire_int_us_2, fire_int_us_3, fire_int_us_4, fire_int_us_5, fire_int_us_6)
# 1) Prepare US intensity layers
fire_int_us_wavg <- terra::weighted.mean(fire_int_us, na.rm = T) # get the max across 6 fire intensity layers
fire_int_us <- rast(fire_int_us_1, fire_int_us_2, fire_int_us_3, fire_int_us_4, fire_int_us_5, fire_int_us_6)
fire_int_us <- c(fire_int_us_1, fire_int_us_2, fire_int_us_3, fire_int_us_4, fire_int_us_5, fire_int_us_6)
fire_int_us
# 1) Prepare US intensity layers
fire_int_us_wavg <- terra::weighted.mean(fire_int_us, na.rm = T) # get the weighted average of 6 fire intensity layers
# 1) Prepare US intensity layers
fire_int_us_wavg <- terra::weighted.mean(fire_int_us, w = c(1,3,5,7,10,14) na.rm = T) # get the weighted average of 6 fire intensity layers
# 1) Prepare US intensity layers
fire_int_us_wavg <- terra::weighted.mean(fire_int_us, w = c(1,3,5,7,10,14), na.rm = T) # get the weighted average of 6 fire intensity layers
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
# 1) Prepare US intensity layers
fire_int_us_wavg <- terra::weighted.mean(fire_int_us, w = c(1,3,5,7,10,14), na.rm = T) # get the weighted average of 6 fire intensity layers
fire_int_us_wavg_m <- fire_int_us_wavg / 0.3048 # Convert feet to meters
plot(fire_int_us_wavg_m)
plot(fire_int_us_wavg)
fire_int_us_kWm <- 273*(fire_int_us_wavg_m)^2.17 # Convert flame length to intensity
plot(fire_int_us_kWm)
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif")*1, rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif"),
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif"), rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")) # FSim fire intensity for CONUS
fire_int_us <- c(rast("01_RAW_DATA/USFS/CONUS_iFLP1.tif")*1, rast("01_RAW_DATA/USFS/CONUS_iFLP2.tif")*3,
rast("01_RAW_DATA/USFS/CONUS_iFLP3.tif")*5, rast("01_RAW_DATA/USFS/CONUS_iFLP4.tif")*7,
rast("01_RAW_DATA/USFS/CONUS_iFLP5.tif")*10, rast("01_RAW_DATA/USFS/CONUS_iFLP6.tif")*14) # FSim fire intensity for CONUS
# 1) Prepare US intensity layers
fire_int_us_med <- terra::app(fire_int_us, fun="median", na.rm = T) # median of weighted 6 fire intensity layers
plot(fire_int_us_med)
fire_int_us_med_m <- fire_int_us_med / 0.3048 # Convert feet to meters
plot(fire_int_us_med_m)
fire_int_us_kWm <- 273*(fire_int_us_wavg_m)^2.17 # Convert flame length to intensity
plot(fire_int_us_kWm)
plot(fire_int_us[[6]])
273*(3)^2.17
273*(10)^2.17
273*(20)^2.17
273*(40)^2.17
install.packages('spatstat')
library(spatstat)
# 1) Prepare US intensity layers
fire_int_us_med <- weighted.median(fire_int_us, w=(1,2,3,4,5,6), na.rm = T) # median of weighted 6 fire intensity layers
# 1) Prepare US intensity layers
fire_int_us_med <- weighted.median(fire_int_us, w=c(1,2,3,4,5,6), na.rm = T) # median of weighted 6 fire intensity layers
# 1) Prepare US intensity layers
fire_int_us_avg <- app(fire_int_us, fun="mean", na.rm = T) # median of weighted 6 fire intensity layers
plot(fire_int_us_avg)
fire_int_us_avg_m <- fire_int_us_avg / 0.3048 # Convert feet to meters
plot(fire_int_us_avg_m)
273*(7)^2.17
fire_int_us_kWm <- 273*(fire_int_us_avg_m)^2.17 # Convert flame length to intensity
plot(fire_int_us_kWm)
max(fire_int_us_kWm)
fire_int_al <- c(rast("01_RAW_DATA/USFS/AK_iFLP1.tif")*1, rast("01_RAW_DATA/USFS/AK_iFLP2.tif")*3,
rast("01_RAW_DATA/USFS/AK_iFLP3.tif")*5, rast("01_RAW_DATA/USFS/AK_iFLP4.tif")*7,
rast("01_RAW_DATA/USFS/AK_iFLP5.tif")*10, rast("01_RAW_DATA/USFS/AK_iFLP6.tif")*14) # FSim fire intensity for Alaska
fire_int_us_EPSG3979 <- terra::project(fire_int_us_kWm,
crs(fire_int_can),
res = res(fire_int_can),
filename = "02_PROCESSED_DATA/USFS/CONUS_FI_250m_EPSG3979.tif",
overwrite = T)
# Alaska
fire_int_al_avg <- app(fire_int_al, fun="mean", na.rm = T) # mean of 6 fire intensity layers
fire_int_al_avg_m <- fire_int_al_avg / 0.3048 # Convert feet to meters
fire_int_al_kWm <- 273*(fire_int_us_al_m)^2.17 # Convert flame length to intensity
fire_int_al_kWm <- 273*(fire_int_al_m)^2.17 # Convert flame length to intensity
fire_int_al_kWm <- 273*(fire_int_al_avg_m)^2.17 # Convert flame length to intensity
fire_int_al_EPSG3979 <- terra::project(fire_int_al_kWm,
crs(fire_int_can),
res = res(fire_int_can),
filename = "02_PROCESSED_DATA/USFS/AL_FI_250m_EPSG3979.tif",
overwrite = T)
# 3) fill in the holes in Canadian prairies and North (NAs)
na_background <- vect("02_PROCESSED_DATA/US_GOV/US_CAN_Borders_Dissolve_FixGeom_Lines.gpkg")
na_background_rast <- rasterize(na_background, burn_pro_na)
plot(na_background_rast)
# 3) fill in the holes in Canadian prairies and North (NAs)
na_background <- vect("02_PROCESSED_DATA/US_GOV/US_CAN_Borders_Dissolve_FixGeom_Lines.gpkg")
na_background_rast <- rasterize(na_background, burn_pro_na, field = "Value")
plot(na_background_rast)
na_background_rast_ero <- rasterize(na_background, burn_pro_na, field = 15.29) # Convert vector to raster, with pixel value of 0
plot(na_background_rast_ero)
View(hybas_can_WatDemand_2060)
rain_ero_na
# Rainfall erosivity data
rain_ero_na <- rast("02_PROCESSED_DATA/ESDAC/Ero_Current_NA.tif") # Rainfall erosivity
# 1) Project erosivity layer
rain_ero_na_EPSG3979 <- terra::project(rain_ero_na,
crs(burn_pro_can),
res = 1000,
filename = "02_PROCESSED_DATA/ESDAC/rain_ero_na_EPSG3979.tif")
warnings()
plot(rain_ero_na_EPSG3979)
